{
	"info": {
		"_postman_id": "6d73ca70-126e-4f71-9ed6-160e8c7b7fe4",
		"name": "IT_Asset_Management_Automation_Testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32184703"
	},
	"item": [
		{
			"name": "Health check",
			"item": [
				{
					"name": "Health check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://it-asset-management-system.onrender.com/status",
							"protocol": "https",
							"host": [
								"it-asset-management-system",
								"onrender",
								"com"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Happy Path",
			"item": [
				{
					"name": "auth",
					"item": [
						{
							"name": "Login-admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"access_token\", pm.response.json().data[0]['access_token']);\r",
											"pm.collectionVariables.set(\"refresh_token\", pm.response.json().data[0]['refresh_token']);\r",
											"\r",
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"access_token\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"refesh_token\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"access_token\",\r",
											"            \"refresh_token\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"admin\",\r\n    \"password\": \"Admin@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"login"
									]
								},
								"description": "### Login\n\nThis endpoint is used to authenticate and obtain access tokens.\n\n#### Request Body\n\n- `username` (string, required): The username for authentication.\n- `password` (string, required): The password for authentication.\n    \n\n#### Response\n\n- Status: 200 OK\n- Content-Type: application/json\n- `data` (array): An array containing access_token and refresh_token.\n    - `access_token` (string): The access token for authentication.\n    - `refresh_token` (string): The refresh token for authentication.\n- `message` (string): A message from the server.\n- `success` (boolean): Indicates if the request was successful."
							},
							"response": []
						},
						{
							"name": "Login-manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.code === 200){\r",
											"    pm.collectionVariables.set(\"access_token\", pm.response.json().data[0]['access_token']);\r",
											"    pm.collectionVariables.set(\"refresh_token\", pm.response.json().data[0]['refresh_token']);\r",
											"}\r",
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"access_token\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"refesh_token\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"access_token\",\r",
											"            \"refresh_token\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"naman\",\r\n    \"password\": \"Naman@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"login"
									]
								},
								"description": "### Login\n\nThis endpoint is used to authenticate and obtain access tokens.\n\n#### Request Body\n\n- `username` (string, required): The username for authentication.\n- `password` (string, required): The password for authentication.\n    \n\n#### Response\n\n- Status: 200 OK\n- Content-Type: application/json\n- `data` (array): An array containing access_token and refresh_token.\n    - `access_token` (string): The access token for authentication.\n    - `refresh_token` (string): The refresh token for authentication.\n- `message` (string): A message from the server.\n- `success` (boolean): Indicates if the request was successful."
							},
							"response": []
						},
						{
							"name": "Login-employee",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if(pm.response.code === 200){\r",
											"    pm.collectionVariables.set(\"access_token\", pm.response.json().data[0]['access_token']);\r",
											"    pm.collectionVariables.set(\"refresh_token\", pm.response.json().data[0]['refresh_token']);\r",
											"}\r",
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"access_token\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"refesh_token\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"access_token\",\r",
											"            \"refresh_token\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"agrima\",\r\n    \"password\": \"Agrima@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/login",
									"host": [
										"{{url}}"
									],
									"path": [
										"login"
									]
								},
								"description": "### Login\n\nThis endpoint is used to authenticate and obtain access tokens.\n\n#### Request Body\n\n- `username` (string, required): The username for authentication.\n- `password` (string, required): The password for authentication.\n    \n\n#### Response\n\n- Status: 200 OK\n- Content-Type: application/json\n- `data` (array): An array containing access_token and refresh_token.\n    - `access_token` (string): The access token for authentication.\n    - `refresh_token` (string): The refresh token for authentication.\n- `message` (string): A message from the server.\n- `success` (boolean): Indicates if the request was successful."
							},
							"response": []
						},
						{
							"name": "Logout",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/logout",
									"host": [
										"{{url}}"
									],
									"path": [
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Refresh",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"access_token\", pm.response.json().data[0]['access_token']);\r",
											"pm.collectionVariables.set(\"refresh_token\", pm.response.json().data[0]['refresh_token']);\r",
											"\r",
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"access_token\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"refresh_token\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"access_token\",\r",
											"            \"refresh_token\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{refresh_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{url}}/refresh",
									"host": [
										"{{url}}"
									],
									"path": [
										"refresh"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "users",
					"item": [
						{
							"name": "View-my-profile",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Response data field contains\",() =>{\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('role');\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('user_id');\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('username');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data field is of correct type\", () =>{\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response['data'][0]['role']).to.be.a('string');\r",
											"    pm.expect(response['data'][0]['user_id']).to.be.a('string');\r",
											"    pm.expect(response['data'][0]['username']).to.be.a('string');\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change-password-admin",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"access_token\", pm.response.json().data[0]['access_token']);\r",
											"pm.collectionVariables.set(\"refresh_token\", pm.response.json().data[0]['refresh_token']);\r",
											"\r",
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"access_token\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"refresh_token\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"access_token\",\r",
											"            \"refresh_token\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"old_password\" : \"Admin@123\",\r\n    \"new_password\": \"Admin@123\",\r\n    \"confirm_password\": \"Admin@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users/change-password",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change-password-manager",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"access_token\", pm.response.json().data[0]['access_token']);\r",
											"pm.collectionVariables.set(\"refresh_token\", pm.response.json().data[0]['refresh_token']);\r",
											"\r",
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"access_token\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"refresh_token\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"access_token\",\r",
											"            \"refresh_token\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"old_password\" : \"Naman@123\",\r\n    \"new_password\": \"Naman@123\",\r\n    \"confirm_password\": \"Naman@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users/change-password",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change-password-employee",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.collectionVariables.set(\"access_token\", pm.response.json().data[0]['access_token']);\r",
											"pm.collectionVariables.set(\"refresh_token\", pm.response.json().data[0]['refresh_token']);\r",
											"\r",
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"access_token\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"refresh_token\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"access_token\",\r",
											"            \"refresh_token\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"old_password\" : \"Agrima@123\",\r\n    \"new_password\": \"Agrima@123\",\r\n    \"confirm_password\": \"Agrima@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users/change-password",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "View-all-users",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Response data field contains\",() =>{\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('role');\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('user_id');\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('username');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data field is of correct type\", () =>{\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response['data'][0]['role']).to.be.a('string');\r",
											"    pm.expect(response['data'][0]['user_id']).to.be.a('string');\r",
											"    pm.expect(response['data'][0]['username']).to.be.a('string');\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"pm.collectionVariables.set('userId',response.data[0].user_id)"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create-new-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\",() => {\r",
											"    pm.response.to.have.status(201)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$randomNoun}}\",\r\n    \"role\": \"employee\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "assets",
					"item": [
						{
							"name": "View-all-assets-in-inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"const schema = {\"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"asset_id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"asset_status\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"asset_type\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"assigned_to\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category_name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"vendor_email\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"asset_id\",\r",
											"            \"asset_status\",\r",
											"            \"asset_type\",\r",
											"            \"assigned_to\",\r",
											"            \"category_name\",\r",
											"            \"vendor_email\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]};\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"const foundItem = response.data.find((item) => item.assigned_to === \"location\")\r",
											"pm.collectionVariables.set('assetId', foundItem.asset_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/assets",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create-new-assets-in-inventory",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\",() => {\r",
											"    pm.response.to.have.status(201)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_name\": \"keyboard\",\r\n    \"brand_name\": \"dell\",\r\n    \"vendor_email\": \"agrima@gmail.com\",\r\n    \"asset_type\": \"assignable\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/assets",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign-asset",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});;"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mapping_id\" : \"MPN8deU\",\r\n    \"asset_type\": \"assignable\",\r\n    \"assigned_to\": \"{{userId}}\",\r\n    \"asset_status\": \"unavailable\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/assets/{{assetId}}/assign",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets",
										"{{assetId}}",
										"assign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign-asset",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mapping_id\" : \"MPN6WgN\",\r\n    \"asset_type\": \"assignable\",\r\n    \"assigned_to\": \"location\",\r\n    \"asset_status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/assets/{{assetId}}/unassign",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets",
										"{{assetId}}",
										"unassign"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "issues",
					"item": [
						{
							"name": "Create-new-issue",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.clear()"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\",() => {\r",
											"    pm.response.to.have.status(201)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"asset_id\": \"ASN5STd\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/issues",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues"
									]
								}
							},
							"response": []
						},
						{
							"name": "View-issue-for-user",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"asset_id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"issue_id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"issue_resolved_by\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"issue_status\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"user_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"asset_id\",\r",
											"            \"issue_id\",\r",
											"            \"issue_resolved_by\",\r",
											"            \"issue_status\",\r",
											"            \"user_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issues/EMPgfnv",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues",
										"EMPgfnv"
									]
								}
							},
							"response": []
						},
						{
							"name": "View-all-issues",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"asset_id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"issue_id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"issue_resolved_by\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"issue_status\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"user_id\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"asset_id\",\r",
											"            \"issue_id\",\r",
											"            \"issue_resolved_by\",\r",
											"            \"issue_status\",\r",
											"            \"user_id\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"};\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});\r",
											"const response = pm.response.json();\r",
											"const foundItem = response.data.find((item) => item.issue_status === \"pending\")\r",
											"pm.collectionVariables.set('issueId', foundItem.issue_id);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issues",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update-issue-status",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"asset_id\": \"ASN5STd\",\r\n    \"user_id\": \"EMPgnfv\",\r\n    \"issue_status\": \"resolved\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/issues/{{issueId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues",
										"{{issueId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "vendors",
					"item": [
						{
							"name": "Create new vendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const alphabet = 'abcdefghijklmnopqrstuvwxyz';\r",
											"let randomName = '';\r",
											"\r",
											"for (let i = 0; i < 4; i++) {\r",
											"randomName += alphabet.charAt(Math.floor(Math.random() * alphabet.length));\r",
											"} \r",
											"\r",
											"pm.collectionVariables.set('vendorName',randomName)\r",
											"randomEmail = randomName + '@gmail.com'\r",
											"pm.collectionVariables.set('vendorEmail',randomEmail)"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\",() => {\r",
											"    pm.response.to.have.status(201)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"vendor_name\": \"{{vendorName}}\",\r\n    \"vendor_email\": \"{{vendorEmail}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/vendors",
									"host": [
										"{{url}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all vendors",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"\r",
											"pm.test(\"Response data field contains\",() =>{\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('active_status');\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('vendor_email');\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('vendor_id');\r",
											"    pm.expect(response['data'][0]).to.haveOwnProperty('vendor_name');\r",
											"});\r",
											"\r",
											"pm.test(\"Response data field is of correct type\", () =>{\r",
											"    const response = pm.response.json();\r",
											"    pm.expect(response['data'][0]['active_status']).to.be.a('string');\r",
											"    pm.expect(response['data'][0]['vendor_email']).to.be.a('string');\r",
											"    pm.expect(response['data'][0]['vendor_id']).to.be.a('string');\r",
											"    pm.expect(response['data'][0]['vendor_name']).to.be.a('string');\r",
											"});\r",
											"\r",
											"const response = pm.response.json();\r",
											"const foundItem = response.data.find((item) => item.active_status === \"true\")\r",
											"pm.collectionVariables.set('vendorId', foundItem.vendor_id);\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/vendors",
									"host": [
										"{{url}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete vendor",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/vendors/{{vendorId}}",
									"host": [
										"{{url}}"
									],
									"path": [
										"vendors",
										"{{vendorId}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "categories",
					"item": [
						{
							"name": "View-all-categories",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\",() => {\r",
											"    pm.response.to.have.status(200)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": [\r",
											"        {\r",
											"          \"type\": \"object\",\r",
											"          \"properties\": {\r",
											"            \"brand_name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category_id\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"category_name\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"vendor_email\": {\r",
											"              \"type\": \"string\"\r",
											"            },\r",
											"            \"vendor_name\": {\r",
											"              \"type\": \"string\"\r",
											"            }\r",
											"          },\r",
											"          \"required\": [\r",
											"            \"brand_name\",\r",
											"            \"category_id\",\r",
											"            \"category_name\",\r",
											"            \"vendor_email\",\r",
											"            \"vendor_name\"\r",
											"          ]\r",
											"        }\r",
											"      ]\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"};\r",
											"\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create-new-category",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\",() => {\r",
											"    pm.response.to.have.status(201)\r",
											"});\r",
											"const schema = {\r",
											"  \"type\": \"object\",\r",
											"  \"properties\": {\r",
											"    \"data\": {\r",
											"      \"type\": \"array\",\r",
											"      \"items\": {}\r",
											"    },\r",
											"    \"message\": {\r",
											"      \"type\": \"string\"\r",
											"    },\r",
											"    \"success\": {\r",
											"      \"type\": \"boolean\"\r",
											"    }\r",
											"  },\r",
											"  \"required\": [\r",
											"    \"data\",\r",
											"    \"message\",\r",
											"    \"success\"\r",
											"  ]\r",
											"}\r",
											"pm.test('Schema validation', () => {\r",
											"  pm.response.to.have.jsonSchema (schema);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_name\": \"{{vendorName}}\",\r\n    \"brand_name\": \"dell\",\r\n    \"vendor_email\": \"krish@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							"const response = pm.response.json();",
							"",
							"pm.test(\"Response is an object\", () => {",
							"    pm.expect(response).to.be.an('object');",
							"});",
							"",
							"pm.test(\"Response contains\", () => {",
							"    pm.expect(response).to.haveOwnProperty('success')",
							"    pm.expect(response.success).to.be.true;",
							"    pm.expect(response).to.haveOwnProperty('data')",
							"    pm.expect(response.data).to.be.an('array')",
							"    pm.expect(response).to.haveOwnProperty('message')",
							"    pm.expect(response.message).to.be.an('string')",
							"});"
						]
					}
				}
			]
		},
		{
			"name": "Negative testcases",
			"item": [
				{
					"name": "Not authenticated",
					"item": [
						{
							"name": "View all users 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Change password 401",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"old_password\" : \"9zcfKp\",\r\n    \"new_password\": \"Naman@123\",\r\n    \"confirm_password\": \"Naman@123\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users/change-password",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"change-password"
									]
								}
							},
							"response": []
						},
						{
							"name": "View my profile 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users/profile",
									"host": [
										"{{url}}"
									],
									"path": [
										"users",
										"profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all vendors 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/vendors",
									"host": [
										"{{url}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all categories 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new vendor 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"vendor_email\": \"agrima@gmail.com\",\r\n    \"vendor_name\": \"Agrima\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/vendors",
									"host": [
										"{{url}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update issue status 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"asset_id\": \"ASN4ReH\",\r\n    \"user_id\": \"EMP8Feo\",\r\n    \"issue_status\": \"resolved\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/issues/ISNdede",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues",
										"ISNdede"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all assets in inventory 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/assets",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new category 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_name\": \"keyboard\",\r\n    \"brand_name\": \"dell\",\r\n    \"vendor_email\": \"agrima@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new assets in inventory 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_name\": \"keyboard\",\r\n    \"brand_name\": \"dell\",\r\n    \"vendor_email\": \"agrima@gmail.com\",\r\n    \"asset_type\": \"assignable\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/assets",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign asset 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mapping_id\" : \"MPN6WgN\",\r\n    \"asset_type\": \"assignable\",\r\n    \"assigned_to\": \"EMP8Feo\",\r\n    \"asset_status\": \"unavailable\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/assets/ASN4ReH/assign",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets",
										"ASN4ReH",
										"assign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign asset 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mapping_id\" : \"MPN6WgN\",\r\n    \"asset_type\": \"assignable\",\r\n    \"assigned_to\": \"location\",\r\n    \"asset_status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/assets/ASN4ReH/unassign",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets",
										"ASN4ReH",
										"unassign"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all issues 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issues",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$randomNoun}}\",\r\n    \"role\": \"asset manager\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete vendor 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/vendors/VEN8Ctq",
									"host": [
										"{{url}}"
									],
									"path": [
										"vendors",
										"VEN8Ctq"
									]
								}
							},
							"response": []
						},
						{
							"name": "View issue for user 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issues/EMP8Feo",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues",
										"EMP8Feo"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new issue 401",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"console.clear()"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"asset_id\": \"ASN4ReH\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/issues",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.collectionVariables.set('access_token','no value')"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status is 401\", () => {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"",
									"pm.test(\"Response is an object\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response contains\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.haveOwnProperty('success')",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(response).to.haveOwnProperty('error')",
									"    pm.expect(response.error).to.be.an('string')",
									"    pm.expect(response).to.haveOwnProperty('message')",
									"    pm.expect(response.message).to.be.an('string')",
									"});"
								]
							}
						}
					]
				},
				{
					"name": "Not authorised",
					"item": [
						{
							"name": "View all users 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all vendors 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/vendors",
									"host": [
										"{{url}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all categories 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new vendor 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"vendor_email\": \"agrima@gmail.com\",\r\n    \"vendor_name\": \"Agrima\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/vendors",
									"host": [
										"{{url}}"
									],
									"path": [
										"vendors"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update issue status 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"asset_id\": \"ASN4ReH\",\r\n    \"user_id\": \"EMP8Feo\",\r\n    \"issue_status\": \"resolved\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/issues/ISNdede",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues",
										"ISNdede"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all assets in inventory 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/assets",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new category 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_name\": \"keyboard\",\r\n    \"brand_name\": \"dell\",\r\n    \"vendor_email\": \"agrima@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/categories",
									"host": [
										"{{url}}"
									],
									"path": [
										"categories"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new assets in inventory 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category_name\": \"keyboard\",\r\n    \"brand_name\": \"dell\",\r\n    \"vendor_email\": \"agrima@gmail.com\",\r\n    \"asset_type\": \"assignable\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/assets",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets"
									]
								}
							},
							"response": []
						},
						{
							"name": "Assign asset 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mapping_id\" : \"MPN6WgN\",\r\n    \"asset_type\": \"assignable\",\r\n    \"assigned_to\": \"EMP8Feo\",\r\n    \"asset_status\": \"unavailable\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/assets/ASN4ReH/assign",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets",
										"ASN4ReH",
										"assign"
									]
								}
							},
							"response": []
						},
						{
							"name": "Unassign asset 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mapping_id\" : \"MPN6WgN\",\r\n    \"asset_type\": \"assignable\",\r\n    \"assigned_to\": \"location\",\r\n    \"asset_status\": \"available\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/assets/ASN4ReH/unassign",
									"host": [
										"{{url}}"
									],
									"path": [
										"assets",
										"ASN4ReH",
										"unassign"
									]
								}
							},
							"response": []
						},
						{
							"name": "View all issues 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/issues",
									"host": [
										"{{url}}"
									],
									"path": [
										"issues"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new user 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{$randomNoun}}\",\r\n    \"role\": \"asset manager\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/users",
									"host": [
										"{{url}}"
									],
									"path": [
										"users"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete vendor 403",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{url}}/vendors/VEN8Ctq",
									"host": [
										"{{url}}"
									],
									"path": [
										"vendors",
										"VEN8Ctq"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Response status is 403\", () => {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"",
									"pm.test(\"Response is an object\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.be.an('object');",
									"});",
									"",
									"pm.test(\"Response contains\", () => {",
									"    const response = pm.response.json();",
									"    pm.expect(response).to.haveOwnProperty('success')",
									"    pm.expect(response.success).to.be.false;",
									"    pm.expect(response).to.haveOwnProperty('error')",
									"    pm.expect(response.error).to.be.an('string')",
									"    pm.expect(response).to.haveOwnProperty('message')",
									"    pm.expect(response.message).to.be.an('string')",
									"});"
								]
							}
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"if(pm.iterationData.get('iteration_name')){",
					"    postman.setNextRequest(getNextRequest());",
					"                   ",
					"    function getNextRequest() {",
					"        let routes;",
					"        if (Array.isArray(pm.collectionVariables.get(\"remainingRoutes\")) === true) {",
					"            routes = pm.collectionVariables.get(\"remainingRoutes\");",
					"        } else {",
					"            routes = pm.iterationData.get(\"routes\");",
					"        }",
					"        const nextRequest = routes.shift();",
					"        pm.collectionVariables.set(\"remainingRoutes\", routes);",
					"        if (nextRequest === undefined) {",
					"            pm.collectionVariables.unset(\"remainingRoutes\");",
					"            return null;",
					"        }",
					"    ",
					"        return nextRequest;",
					"    }",
					"}",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "userId",
			"value": "EMP6s2u"
		},
		{
			"key": "vendorName",
			"value": "ikfy"
		},
		{
			"key": "vendorEmail",
			"value": "ikfy@gmail.com"
		},
		{
			"key": "vendorId",
			"value": "VEN3jZE"
		},
		{
			"key": "assetId",
			"value": "ASN4ikg"
		},
		{
			"key": "issueId",
			"value": "ISN5h3u"
		},
		{
			"key": "url",
			"value": "https://it-asset-management-system.onrender.com/v1",
			"type": "string"
		},
		{
			"key": "access_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcwODUwMDM0MCwianRpIjoiOWQ4YTgyOGYtZjQ5ZC00NDVhLTkwOTQtZGVmZTNmMzg4ZWQzIiwidHlwZSI6ImFjY2VzcyIsInN1YiI6IkVNUDZzMnUiLCJuYmYiOjE3MDg1MDAzNDAsImNzcmYiOiJjNjYzMWE5Ni04N2JmLTRkMWUtOWQ3OS0xOTA3NWE5MGQ4MjciLCJleHAiOjE3MDg1MDEyNDAsInRlbnQiOiJzbmFwZSIsImhvdXNlIjoxfQ.JEVjkQU5Lez07SNSwSvIns4IHc5iybq3fCWXQp8RrOg"
		},
		{
			"key": "refresh_token",
			"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJmcmVzaCI6ZmFsc2UsImlhdCI6MTcwODUwMDM0MCwianRpIjoiZDRiZmI1OGEtODYxMS00MDIzLTk1ZmItODJlOThiMTQwNDk5IiwidHlwZSI6InJlZnJlc2giLCJzdWIiOiJFTVA2czJ1IiwibmJmIjoxNzA4NTAwMzQwLCJjc3JmIjoiMWUzNTFiMzktM2M3MC00NjI5LTk5M2MtNWM5NjdkYTdkM2RmIiwiZXhwIjoxNzExMDkyMzQwLCJ0ZW50Ijoic25hcGUifQ.95KlAgRSHbVHWjrB7IMFSbCfTV0nDxuTtJTdPZzp0Fw"
		}
	]
}